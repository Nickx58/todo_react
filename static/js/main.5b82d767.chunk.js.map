{"version":3,"sources":["utils/index.js","constants/tasks.js","reducers/tasks.js","constants/action-types.js","reducers/selectedTask.js","reducers/index.js","components/Author.js","components/NavItem.js","components/SideNav.js","actions/todos.js","components/TaskForm.js","containers/Header.js","components/MainContainer.js","components/EmptyMessage.js","components/CircularProgress.js","containers/TaskDetails.js","components/SearchTask.js","components/TaskSummary.js","containers/TaskList.js","containers/Tasks.js","components/App.js","components/Root.js","index.js","utils/store.js","assets/task-search.svg","assets/task-pending.svg","assets/task-archived.svg","assets/task-completed.svg","assets/task-in-progress.svg","assets/plus.svg","assets/bin.svg","assets/edit.svg","assets/done.svg","assets/www.svg"],"names":["formatDate","dateString","timestamp","Date","parse","isNaN","toLocaleString","hour12","month","year","day","hour","minute","TaskStatus","Object","freeze","PENDING","IN_PROGRESS","COMPLETED","ARCHIVED","TaskPriority","HIGH","MEDIUM","LOW","t","id","uniqueId","title","description","progress","priority","tags","status","createdAt","initialState","keyBy","tasks","state","action","type","task","defaults","otherTasks","selectedTask","taskId","combineReducers","Author","name","className","NavItem","props","classes","Array","push","join","children","SideNav","handleToggle","onToggle","onClick","exact","to","activeClassName","src","TasksIcon","alt","TaskPendingIcon","TaskInProgressIcon","TaskCompleteIcon","TaskArchivedIcon","updateTask","toggleTaskSelection","TaskForm","useState","setTask","handleValueChange","e","property","target","value","onSubmit","preventDefault","defaultValue","placeholder","onChange","onCancel","propType","PropTypes","shape","string","isRequired","arrayOf","number","func","connect","isCreateModalVisible","setIsCreateModalVisible","handleFormCancel","plusIcon","dispatch","addTask","MainContainer","EmptyMessage","WwwIcon","message","CircularProgress","this","updateCanvas","Math","ceil","ctx","refs","canvas","getContext","cw","width","ch","height","arcWidth","showLabel","innerRadius","radius","clearRect","beginPath","arc","PI","fillStyle","fill","globalAlpha","strokeStyle","color","lineWidth","stroke","fontSize","textAlign","textBaseline","font","fillText","deltaAngle","startAngle","endAngle","ref","React","Component","isEditing","setIsEditing","isTaskSelected","handleMarkAsDone","handleMarkAsArchived","startCase","split","map","tag","key","trim","BinIcon","EditIcon","DoneIcon","TaskActions","SearchTask","onSearch","TaskSummary","isSelected","onTaskSelected","TaskList","search","initList","filter","match","RegExp","setState","handleSearch","bind","length","handleTaskSelection","keys","k","CoonectedTasks","App","isNavVisible","setIsNavVisible","isVisible","path","component","Tasks","Root","store","basename","process","render","middlewares","next","console","group","info","result","log","getState","groupEnd","createStore","rootReducer","composeWithDevTools","applyMiddleware","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5b82d767.chunk.js","sourcesContent":["/**\n * Formats date in `DD MMMM YYYY, h:mm a` format\n * @param {string|Date} dateString valid date string in ISO format\n */\nexport function formatDate(dateString) {\n  const timestamp = Date.parse(dateString);\n\n  if (!isNaN(timestamp)) {\n    const date = new Date(dateString);\n    return date.toLocaleString(\"en-IN\", {\n      hour12: true,\n      month: \"long\",\n      year: \"numeric\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n  }\n\n  return \"\";\n}\n","export const TaskStatus = Object.freeze({\n  PENDING: \"pending\",\n  IN_PROGRESS: \"in_progress\",\n  COMPLETED: \"completed\",\n  ARCHIVED: \"archived\"\n});\n\nexport const TaskPriority = Object.freeze({\n  HIGH: \"high\",\n  MEDIUM: \"medium\",\n  LOW: \"low\"\n});\n","import keyBy from \"lodash/keyBy\";\nimport defaults from \"lodash/defaults\";\nimport uniqueId from \"lodash/uniqueId\";\n\nimport { formatDate } from \"../utils\";\nimport { TaskPriority, TaskStatus } from \"../constants/tasks\";\nimport { ADD_TASK, UPDATE_TASK, DELETE_TASK } from \"../constants/action-types\";\n\nconst t = [\n  {\n    id: uniqueId(\"task-\"),\n    title: \"Create a todo app in React\",\n    description: \"\",\n    progress: 30,\n    priority: TaskPriority.HIGH,\n    tags: \"todo, work\",\n    status: TaskStatus.PENDING,\n    createdAt: formatDate(new Date())\n  },\n  {\n    id: uniqueId(\"task-\"),\n    title: \"Complete 100km running in one week\",\n    description: \"\",\n    progress: 0,\n    priority: TaskPriority.MEDIUM,\n    tags: \"health\",\n    status: TaskStatus.PENDING,\n    createdAt: formatDate(new Date())\n  },\n  {\n    id: uniqueId(\"task-\"),\n    title: \"Watch 2 movies this weekend with friends\",\n    description: \"\",\n    progress: 100,\n    priority: TaskPriority.LOW,\n    tags: \"life, friends\",\n    status: TaskStatus.COMPLETED,\n    createdAt: formatDate(new Date())\n  },\n  {\n    id: uniqueId(\"task-\"),\n    title: \"Call doctor for appointments\",\n    description: \"\",\n    progress: 0,\n    priority: TaskPriority.LOW,\n    tags: \"health\",\n    status: TaskStatus.PENDING,\n    createdAt: formatDate(new Date())\n  },\n  {\n    id: uniqueId(\"task-\"),\n    title: \"Pay house rent\",\n    description: \"\",\n    progress: 0,\n    priority: TaskPriority.LOW,\n    tags: \"todo\",\n    status: TaskStatus.PENDING,\n    createdAt: formatDate(new Date())\n  }\n];\n\nconst initialState = keyBy(t, \"id\");\n\nconst tasks = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TASK: {\n      const task = defaults(action.task, {\n        id: uniqueId(\"task-\"),\n        title: \"Untitled task\",\n        description: \"\",\n        progress: 0,\n        priority: TaskPriority.LOW,\n        tags: \"todo\",\n        status: TaskStatus.PENDING,\n        createdAt: formatDate(new Date())\n      });\n      return {\n        [task.id]: task,\n        ...state\n      };\n    }\n    case UPDATE_TASK: {\n      const { [action.task.id]: task, ...otherTasks } = state;\n      return {\n        [task.id]: {\n          ...task,\n          ...action.task\n        },\n        ...otherTasks\n      };\n    }\n    case DELETE_TASK: {\n      const { [action.task.id]: task, ...otherTasks } = state;\n      return otherTasks;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tasks;\n","export const ADD_TASK = \"ADD_TASK\";\nexport const UPDATE_TASK = \"UPDATE_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const MOVE_TASK = \"MOVE_TASK\";\nexport const TOGGLE_TASK_SELECTION = \"TOGGLE_TASK_SELECTION\";\n","import { TOGGLE_TASK_SELECTION } from \"../constants/action-types\";\n\nconst initialState = null;\n\nconst selectedTask = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_TASK_SELECTION:\n      return state === action.taskId ? initialState : action.taskId;\n    default:\n      return state;\n  }\n};\n\nexport default selectedTask;\n","import { combineReducers } from \"redux\";\n\nimport tasks from \"./tasks\";\nimport selectedTask from \"./selectedTask\";\n\nexport default combineReducers({\n  tasks,\n  selectedTask\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/Author.scss\";\n\nconst Author = ({ name }) => (\n  <div className=\"author\">\n    <div className=\"author__details\">\n      <div className=\"author__label\">Showing tasks for</div>\n      <div className=\"author__name\">{name}</div>\n    </div>\n  </div>\n);\n\nAuthor.propTypes = {\n  name: PropTypes.string.isRequired\n};\n\nexport default Author;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst NavItem = props => {\n  const classes = [\"nav__item\"];\n\n  if (props.classes && props.classes instanceof Array) {\n    classes.push(...props.classes);\n  } else if (props.classes) {\n    classes.push(props.classes);\n  }\n\n  return <div className={classes.join(\" \")}>{props.children}</div>;\n};\n\nNavItem.propTypes = {\n  classes: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string)\n  ]),\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(PropTypes.element)\n  ]).isRequired\n};\n\nexport default NavItem;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"../styles/SideNav.scss\";\nimport TasksIcon from \"../assets/task-search.svg\";\nimport TaskPendingIcon from \"../assets/task-pending.svg\";\nimport TaskArchivedIcon from \"../assets/task-archived.svg\";\nimport TaskCompleteIcon from \"../assets/task-completed.svg\";\nimport TaskInProgressIcon from \"../assets/task-in-progress.svg\";\n\nimport Author from \"./Author\";\nimport NavItem from \"./NavItem\";\n\nconst SideNav = props => {\n  const handleToggle = () => {\n    if (props.onToggle) {\n      props.onToggle();\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"app__side-nav-backdrop\" onClick={handleToggle}></div>\n      <nav className=\"app__side-nav nav\">\n        <NavItem classes=\"nav__header\">\n          <Author name=\"Nikhil Sharma\" />\n        </NavItem>\n        <NavItem>\n          <NavLink\n            exact\n            to=\"/tasks\"\n            className=\"nav__link link\"\n            activeClassName=\"link_active\"\n            onClick={handleToggle}\n          >\n            <img src={TasksIcon} alt=\"task\" className=\"link__icon\" />\n            <span className=\"link__text\">All Tasks</span>\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            to=\"/tasks/pending\"\n            className=\"nav__link link\"\n            activeClassName=\"link_active\"\n            onClick={handleToggle}\n          >\n            <img src={TaskPendingIcon} alt=\"task\" className=\"link__icon\" />\n            <span className=\"link__text\">Pending</span>\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            to=\"/tasks/in-progress\"\n            className=\"nav__link link\"\n            activeClassName=\"link_active\"\n            onClick={handleToggle}\n          >\n            <img src={TaskInProgressIcon} alt=\"task\" className=\"link__icon\" />\n            <span className=\"link__text\">In Progress</span>\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            to=\"/tasks/completed\"\n            className=\"nav__link link\"\n            activeClassName=\"link_active\"\n            onClick={handleToggle}\n          >\n            <img src={TaskCompleteIcon} alt=\"task\" className=\"link__icon\" />\n            <span className=\"link__text\">Completed</span>\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            to=\"/tasks/archived\"\n            className=\"nav__link link\"\n            activeClassName=\"link_active\"\n            onClick={handleToggle}\n          >\n            <img src={TaskArchivedIcon} alt=\"task\" className=\"link__icon\" />\n            <span className=\"link__text\">Archived</span>\n          </NavLink>\n        </NavItem>\n        {/* <NavItem classes=\"overall-progress\">\n        <div className=\"overall-progress__label\">Task Progress</div>\n        <CircularProgress\n          className=\"overall-progress__canvas\"\n          color=\"#fbc02d\"\n          showLabel\n          width={150}\n          progress={70}\n        />\n      </NavItem> */}\n      </nav>\n      <div className=\"app__side-nav-handle\">\n        <div className=\"hamburger-icon\" onClick={handleToggle}>\n          <span className=\"line\"></span>\n          <span className=\"line\"></span>\n          <span className=\"line\"></span>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nSideNav.propTypes = {\n  isVisible: PropTypes.bool,\n  onToggle: PropTypes.func\n};\n\nexport default SideNav;\n","import * as actionTypes from \"../constants/action-types\";\n\nexport const addTask = task => ({\n  type: actionTypes.ADD_TASK,\n  task\n});\n\nexport const updateTask = task => ({\n  type: actionTypes.UPDATE_TASK,\n  task\n});\n\nexport const deleteTask = task => ({\n  type: actionTypes.DELETE_TASK,\n  task\n});\n\nexport const moveTask = (task, position) => ({\n  type: actionTypes.MOVE_TASK,\n  task,\n  position\n});\n\nexport const toggleTaskSelection = taskId => ({\n  type: actionTypes.TOGGLE_TASK_SELECTION,\n  taskId\n});\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/TaskForm.scss\";\nimport { TaskStatus, TaskPriority } from \"../constants/tasks\";\n\nconst TaskForm = props => {\n  const [task, setTask] = useState(props.task || {});\n\n  const handleProgressChange = e => {\n    const value = +e.target.value;\n    let status = task.status;\n\n    if (value === 100) {\n      status = TaskStatus.COMPLETED;\n    } else if (value === 0) {\n      status = TaskStatus.PENDING;\n    } else {\n      status = TaskStatus.IN_PROGRESS;\n    }\n\n    setTask({ ...task, progress: value, status });\n  };\n\n  const handleValueChange = (e, property) => {\n    setTask({ ...task, [property]: e.target.value });\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    props.onSubmit(task);\n  };\n\n  const handleFormCancel = e => {\n    e.preventDefault();\n    props.onCancel();\n  };\n\n  return (\n    <form className=\"task-form\" onSubmit={handleFormSubmit}>\n      <h1 className=\"task-form__title\">\n        {props.task ? \"Edit Task\" : \"Create Task \"}\n      </h1>\n      <div className=\"task-form__group\">\n        <label className=\"task-form__label\">Title:</label>\n        <input\n          className=\"task-form__input\"\n          type=\"text\"\n          defaultValue={props.task && props.task.title}\n          placeholder=\"Task summary\"\n          onChange={e => handleValueChange(e, \"title\")}\n        />\n      </div>\n      <div className=\"task-form__group\">\n        <label className=\"task-form__label\">Description:</label>\n        <textarea\n          className=\"task-form__input\"\n          type=\"text\"\n          defaultValue={props.task && props.task.description}\n          placeholder=\"Task details (optional)\"\n          onChange={e => handleValueChange(e, \"description\")}\n        />\n      </div>\n      <div className=\"task-form__group\">\n        <label className=\"task-form__label\">Tags:</label>\n        <input\n          className=\"task-form__input\"\n          type=\"text\"\n          defaultValue={props.task && props.task.tags}\n          placeholder=\"Comma-separated tags\"\n          onChange={e => handleValueChange(e, \"tags\")}\n        />\n      </div>\n      <div className=\"task-form__group\">\n        <label className=\"task-form__label\">Progress:</label>\n        <input\n          className=\"task-form__input\"\n          type=\"number\"\n          defaultValue={props.task && props.task.progress}\n          placeholder=\"Progress in percentage between (0-100)\"\n          onChange={handleProgressChange}\n        />\n      </div>\n      <div className=\"task-form__group\">\n        <label className=\"task-form__label\">Progress:</label>\n        <select\n          className=\"task-form__input\"\n          defaultValue={props.task && props.task.priority}\n          placeholder=\"Task priority\"\n          onChange={e => handleValueChange(e, \"priority\")}\n        >\n          <option value={TaskPriority.LOW}>Low</option>\n          <option value={TaskPriority.MEDIUM}>Medium</option>\n          <option value={TaskPriority.HIGH}>High</option>\n        </select>\n      </div>\n      <div className=\"task-form__group task-form__group_right\">\n        <button\n          className=\"task-form__action button button_default\"\n          type=\"button\"\n          onClick={handleFormCancel}\n        >\n          Cancel\n        </button>\n        <button className=\"task-form__action button button_info\" type=\"submit\">\n          {props.task ? \"Update\" : \"Create\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nTaskForm.propType = {\n  task: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n    progress: PropTypes.number.isRequired,\n    priority: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n};\n\nexport default TaskForm;\n","import React, { useState, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport \"../styles/Header.scss\";\nimport { addTask } from \"../actions\";\nimport plusIcon from \"../assets/plus.svg\";\nimport TaskForm from \"../components/TaskForm\";\n\nconst Header = props => {\n  const [isCreateModalVisible, setIsCreateModalVisible] = useState(false);\n\n  const handleFormSubmit = task => {\n    setIsCreateModalVisible(false);\n    props.dispatch(addTask(task));\n  };\n\n  const handleFormCancel = () => {\n    setIsCreateModalVisible(false);\n  };\n\n  return (\n    <Fragment>\n      <header className=\"app__header header\">\n        <div className=\"header__title\">{props.title}</div>\n        <button\n          className=\"header__action header__action_lg-screen button button_default\"\n          onClick={() => setIsCreateModalVisible(true)}\n        >\n          <img src={plusIcon} className=\"button__icon\" alt=\"plus\" />\n          <span className=\"button__text\">Add Tasks</span>\n        </button>\n        {isCreateModalVisible && (\n          <div className=\"modal\">\n            <div className=\"modal__body\">\n              <TaskForm\n                onSubmit={handleFormSubmit}\n                onCancel={handleFormCancel}\n              />\n            </div>\n            <div className=\"modal__backdrop\" onClick={handleFormCancel} />\n          </div>\n        )}\n      </header>\n      {!props.selectedTask && (\n        <button\n          className=\"header__action header__action_sm-screen button button_fab\"\n          onClick={() => setIsCreateModalVisible(true)}\n        >\n          +\n        </button>\n      )}\n    </Fragment>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default connect(({ selectedTask }) => ({ selectedTask }))(Header);\n","import React from \"react\";\n\nimport Header from \"../containers/Header\";\n\nconst MainContainer = props => (\n  <div className=\"app__main-container\">\n    <Header title=\"All Tasks\" />\n    <div className=\"app__body\">{props.children}</div>\n  </div>\n);\n\nexport default MainContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/EmptyMessage.scss\";\nimport WwwIcon from \"../assets/www.svg\";\n\nconst EmptyMessage = props => (\n  <div className=\"empty-message\">\n    <img src={WwwIcon} alt=\"www\" className=\"empty-message__icon\" />\n    <p className=\"empty-message__message\">{props.message}</p>\n  </div>\n);\n\nEmptyMessage.propTypes = {\n  message: PropTypes.string.isRequired\n};\n\nexport default EmptyMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass CircularProgress extends React.Component {\n  componentDidMount() {\n    this.updateCanvas();\n  }\n  componentDidUpdate() {\n    this.updateCanvas();\n  }\n\n  updateCanvas() {\n    const progress = Math.ceil(this.props.progress);\n\n    const ctx = this.refs.canvas.getContext(\"2d\");\n    const cw = ctx.canvas.width / 2;\n    const ch = ctx.canvas.height / 2;\n\n    const arcWidth = this.props.showLabel\n      ? (this.props.width * 10) / 100\n      : (this.props.width * 15) / 100;\n\n    const innerRadius = this.props.width / 2 - arcWidth;\n    const radius = (this.props.width - arcWidth) / 2;\n\n    // clear canvas\n    ctx.clearRect(0, 0, this.props.width, this.props.width);\n\n    // draw inner circle\n    ctx.beginPath();\n    ctx.arc(cw, ch, innerRadius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = \"#FFF\";\n    ctx.fill();\n\n    // draw progress track\n    ctx.beginPath();\n    ctx.arc(cw, ch, radius, 0, 2 * Math.PI, false);\n    ctx.globalAlpha = 0.5;\n    ctx.strokeStyle = this.props.color;\n    ctx.lineWidth = arcWidth;\n    ctx.stroke();\n    ctx.globalAlpha = 1;\n\n    if (this.props.showLabel) {\n      // write progress text\n      const fontSize = (this.props.width * 15) / 100;\n      ctx.fillStyle = \"#000\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.font = `${fontSize}pt Verdana`;\n      ctx.fillText(progress + \"%\", cw + 2, ch);\n    }\n\n    // draw progress arc\n    const deltaAngle = (progress * Math.PI * 2) / 100;\n    const startAngle = -Math.PI / 2;\n    const endAngle = -(deltaAngle - startAngle);\n    ctx.beginPath();\n    ctx.arc(cw, ch, radius, startAngle, endAngle, true);\n    ctx.strokeStyle = this.props.color;\n    ctx.stroke();\n  }\n\n  render() {\n    return (\n      <canvas\n        className={this.props.className}\n        ref=\"canvas\"\n        width={this.props.width}\n        height={this.props.width}\n      />\n    );\n  }\n}\n\nCircularProgress.propTypes = {\n  color: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  showLabel: PropTypes.bool,\n  progress: PropTypes.number.isRequired\n};\n\nexport default CircularProgress;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport startCase from \"lodash/startCase\";\n\nimport \"../styles/TaskDetails.scss\";\nimport BinIcon from \"../assets/bin.svg\";\nimport EditIcon from \"../assets/edit.svg\";\nimport DoneIcon from \"../assets/done.svg\";\n\nimport { updateTask, toggleTaskSelection } from \"../actions\";\nimport TaskForm from \"../components/TaskForm\";\nimport { TaskStatus } from \"../constants/tasks\";\nimport EmptyMessage from \"../components/EmptyMessage\";\nimport CircularProgress from \"../components/CircularProgress\";\n\nconst TaskDetails = props => {\n  const [isEditing, setIsEditing] = useState(false);\n  const task = props.selectedTask;\n  const isTaskSelected = !!task.id;\n\n  const handleTaskClose = () => {\n    props.dispatch(toggleTaskSelection(task.id));\n  };\n\n  const handleMarkAsDone = () => {\n    props.dispatch(\n      updateTask({\n        ...task,\n        progress: 100,\n        status: TaskStatus.COMPLETED\n      })\n    );\n  };\n\n  const handleMarkAsArchived = () => {\n    props.dispatch(\n      updateTask({\n        ...task,\n        status: TaskStatus.ARCHIVED\n      })\n    );\n  };\n\n  const handleEditTask = task => {\n    setIsEditing(false);\n    props.dispatch(updateTask(task));\n  };\n\n  const handleFormCancel = () => {\n    setIsEditing(false);\n  };\n\n  const TaskActions = () => {\n    switch (task.status) {\n      case TaskStatus.ARCHIVED:\n        return null;\n      case TaskStatus.COMPLETED:\n        return (\n          <div className=\"task-panel__actions\">\n            <button\n              className=\"button button_danger\"\n              onClick={handleMarkAsArchived}\n            >\n              <img src={BinIcon} alt=\"archive\" className=\"button__icon\" />\n              <span className=\"button__text\">Archive</span>\n            </button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"task-panel__actions\">\n            <button\n              className=\"button button_info\"\n              onClick={() => setIsEditing(true)}\n            >\n              <img src={EditIcon} alt=\"edit\" className=\"button__icon\" />\n              <span className=\"button__text\">Edit Task</span>\n            </button>\n            <button\n              className=\"button button_success\"\n              onClick={handleMarkAsDone}\n            >\n              <img src={DoneIcon} alt=\"done\" className=\"button__icon\" />\n              <span className=\"button__text\">Done</span>\n            </button>\n          </div>\n        );\n    }\n  };\n\n  if (isTaskSelected && isEditing) {\n    return (\n      <div className=\"tasks__details task-panel\">\n        <TaskForm\n          task={task}\n          onSubmit={handleEditTask}\n          onCancel={handleFormCancel}\n        />\n      </div>\n    );\n  } else if (isTaskSelected) {\n    return (\n      <div className=\"tasks__details task-panel\">\n        <h1 className=\"task-panel__title\">\n          <span className=\"title\">{task.title}</span>\n          <span className=\"close\" onClick={handleTaskClose}>\n            &times;\n          </span>\n        </h1>\n        <div className=\"task-panel__metas\">\n          <div className=\"task-panel__section\">\n            <div className=\"meta\">\n              <span className=\"meta__title\">ID:</span>\n              <span className=\"meta__value\">{task.id}</span>\n            </div>\n            <div className=\"meta\">\n              <span className=\"meta__title\">Created At:</span>\n              <span className=\"meta__value\">{task.createdAt}</span>\n            </div>\n            <div className=\"meta\">\n              <span className=\"meta__title\">Priority:</span>\n              <span className=\"meta__value\">{startCase(task.priority)}</span>\n            </div>\n            <div className=\"meta\">\n              <span className=\"meta__title\">Tags:</span>\n              <span className=\"meta__value\">\n                {task.tags &&\n                  task.tags.split(\",\").map((tag, key) => (\n                    <span key={key} className=\"tag\">\n                      {tag.trim()}\n                    </span>\n                  ))}\n              </span>\n            </div>\n            <div className=\"meta\">\n              <span className=\"meta__title\">Status:</span>\n              <span className=\"meta__value\">{startCase(task.status)}</span>\n            </div>\n          </div>\n          <div className=\"task-panel__section\">\n            <CircularProgress\n              className=\"task-panel__canvas\"\n              color=\"#fbc02d\"\n              showLabel\n              width={150}\n              progress={task.progress}\n            />\n          </div>\n        </div>\n        {task.description && (\n          <div className=\"task-panel__details-label\">Description: </div>\n        )}\n        <p className=\"task-panel__details\">{task.description}</p>\n        {TaskActions()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"tasks__details task-panel\">\n      <EmptyMessage message=\"No tasks selected\" />\n    </div>\n  );\n};\n\nexport default connect(state => ({\n  selectedTask: state.tasks[state.selectedTask] || {}\n}))(TaskDetails);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/SearchTask.scss\";\n\nconst SearchTask = props => {\n  return (\n    <div className=\"task-list__search search\">\n      <input\n        type=\"text\"\n        className=\"search__input\"\n        placeholder=\"Search tasks\"\n        onChange={e => props.onSearch(e.target.value)}\n      />\n    </div>\n  );\n};\n\nSearchTask.propType = {\n  onSearch: PropTypes.func.isRequired\n};\n\nexport default SearchTask;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../styles/TaskSummary.scss\";\nimport CircularProgress from \"./CircularProgress\";\n\nconst TaskSummary = props => {\n  const classes = props.isSelected\n    ? \"task-list__item task task_selected\"\n    : \"task-list__item task\";\n  return (\n    <div className={classes} onClick={props.onTaskSelected}>\n      <div className=\"task__drag-handle\" />\n      <div className=\"task__details\">\n        <div className=\"task__title\">{props.task.title}</div>\n        <div className=\"task__tags\">\n          {props.task.tags &&\n            props.task.tags.split(\",\").map((tag, key) => (\n              <span className=\"tag\" key={key}>\n                {tag.trim()}\n              </span>\n            ))}\n        </div>\n      </div>\n      <CircularProgress\n        className=\"task__progress\"\n        color=\"#7e57c2\"\n        width={40}\n        progress={props.task.progress}\n      />\n    </div>\n  );\n};\n\nTaskSummary.propTypes = {\n  isSelected: PropTypes.bool,\n  task: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    tags: PropTypes.string,\n    progress: PropTypes.number.isRequired,\n    priority: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired\n  }),\n  onTaskSelected: PropTypes.func.isRequired\n};\n\nexport default TaskSummary;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../styles/TaskList.scss\";\nimport { TaskStatus } from \"../constants/tasks\";\nimport { toggleTaskSelection } from \"../actions\";\nimport SearchTask from \"../components/SearchTask\";\nimport TaskSummary from \"../components/TaskSummary\";\nimport EmptyMessage from \"../components/EmptyMessage\";\n\nclass TaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      search: \"\"\n    };\n  }\n\n  componentWillReceiveProps(props) {\n    this.initList(props);\n  }\n\n  componentDidMount() {\n    this.initList(this.props);\n  }\n\n  initList(props) {\n    const tasks = props.tasks.filter(\n      t =>\n        (t.status === props.status ||\n          (props.status === \"all\" && t.status !== TaskStatus.ARCHIVED)) &&\n        t.title.match(new RegExp(this.state.search, \"i\"))\n    );\n    this.setState({ ...this.state, tasks });\n  }\n\n  handleSearch(title) {\n    this.setState({\n      ...this.state,\n      search: title,\n      tasks: this.props.tasks.filter(\n        t =>\n          (t.status === this.props.status ||\n            (this.props.status === \"all\" &&\n              t.status !== TaskStatus.ARCHIVED)) &&\n          t.title.match(new RegExp(title, \"i\"))\n      )\n    });\n  }\n\n  handleTaskSelection(task) {\n    this.props.dispatch(toggleTaskSelection(task.id));\n  }\n\n  render() {\n    const tasks = this.state.tasks;\n    const selectedTask = this.props.selectedTask;\n    return (\n      <div className=\"tasks__list task-list\">\n        <SearchTask onSearch={this.handleSearch.bind(this)} />\n        {tasks.length ? (\n          <div className=\"task-list__list\">\n            {tasks.map((task, key) => (\n              <TaskSummary\n                key={key}\n                task={task}\n                isSelected={selectedTask.id === task.id}\n                onTaskSelected={this.handleTaskSelection.bind(this, task)}\n              />\n            ))}\n          </div>\n        ) : (\n          <EmptyMessage message=\"No tasks!\" />\n        )}\n      </div>\n    );\n  }\n}\n\nTaskList.propTypes = {\n  status: PropTypes.string\n};\n\nexport default connect(state => ({\n  tasks: Object.keys(state.tasks).map(k => state.tasks[k]),\n  selectedTask: state.tasks[state.selectedTask] || {}\n}))(TaskList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"../styles/Tasks.scss\";\nimport TaskDetails from \"./TaskDetails\";\nimport TaskList from \"./TaskList\";\n\nconst Tasks = props => {\n  const classes = props.selectedTask\n    ? \"tasks tasks__details-visible\"\n    : \"tasks tasks__list-visible\";\n  return (\n    <div className={classes}>\n      <TaskList {...props} />\n      <TaskDetails />\n    </div>\n  );\n};\n\nconst CoonectedTasks = connect(({ selectedTask }) => ({ selectedTask }))(Tasks);\n\nexport default status => props => <CoonectedTasks {...props} status={status} />;\n","import React, { useState } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport \"../styles/App.scss\";\nimport SideNav from \"./SideNav\";\nimport MainContainer from \"./MainContainer\";\nimport Tasks from \"../containers/Tasks\";\nimport { TaskStatus } from \"../constants/tasks\";\n\nconst App = props => {\n  const [isNavVisible, setIsNavVisible] = useState(false);\n\n  const handleNavToggle = () => {\n    setIsNavVisible(!isNavVisible);\n  };\n\n  return (\n    <div className={isNavVisible ? \"app app_nav-visible\" : \"app\"}>\n      <SideNav isVisible={isNavVisible} onToggle={handleNavToggle} />\n      <MainContainer>\n        <Route\n          path={`${props.match.path}/archived`}\n          component={Tasks(TaskStatus.ARCHIVED)}\n        />\n        <Route\n          path={`${props.match.path}/completed`}\n          component={Tasks(TaskStatus.COMPLETED)}\n        />\n        <Route\n          path={`${props.match.path}/in-progress`}\n          component={Tasks(TaskStatus.IN_PROGRESS)}\n        />\n        <Route\n          path={`${props.match.path}/pending`}\n          component={Tasks(TaskStatus.PENDING)}\n        />\n        <Route exact path={`${props.match.path}`} component={Tasks(\"all\")} />\n      </MainContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Provider } from \"react-redux\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nimport App from \"./App\";\n\nconst Root = ({ store }) => (\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/tasks\" />} />\n        <Route path=\"/tasks\" component={App} />\n      </Switch>\n    </Router>\n  </Provider>\n);\n\nRoot.propTypes = {\n  store: PropTypes.object.isRequired\n};\n\nexport default Root;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\nimport Root from \"./components/Root\";\nimport { logger } from \"./utils/store\";\n\nimport \"./index.scss\";\n\nconst middlewares = [logger];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nrender(<Root store={store} />, document.getElementById(\"root\"));\n","/**\n * Logs all actions and states after they are dispatched.\n * @param {*} store redux store\n */\nexport const logger = store => next => action => {\n  console.group(action.type);\n  console.info(\"dispatching\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  console.groupEnd();\n  return result;\n};\n","module.exports = __webpack_public_path__ + \"static/media/task-search.e7cffb9d.svg\";","module.exports = __webpack_public_path__ + \"static/media/task-pending.2bfbf733.svg\";","module.exports = __webpack_public_path__ + \"static/media/task-archived.37acd060.svg\";","module.exports = __webpack_public_path__ + \"static/media/task-completed.981ae311.svg\";","module.exports = __webpack_public_path__ + \"static/media/task-in-progress.9be52237.svg\";","module.exports = __webpack_public_path__ + \"static/media/plus.8601f5bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/bin.40d5f230.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.522a418b.svg\";","module.exports = __webpack_public_path__ + \"static/media/done.c2625638.svg\";","module.exports = __webpack_public_path__ + \"static/media/www.c94aea67.svg\";"],"sourceRoot":""}